<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
                módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
                hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
                példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
                az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
                <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf</link> (16-22 fólia)
                Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)
        </para>
        
        <para>
            Megoldás forrása:                
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section> 

    <section>
        <title>Homokózó</title>
        <para>
                Írjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
                Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
                (erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
                attribútum pointer, referencia vagy tagként tartalmazott legyen).
                Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
                (például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját! 1
        </para>
        
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  

    <section>
        <title>„Gagyi”</title>
        
        <para>
                Az ismert formális „<programlisting language="c"><![CDATA[while(x <= t && x >= t && t != x);
                    ]]></programlisting>” tesztkérdéstípusra adj a szokásosnál
                (miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
                referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
                értékekkel meg nem! A példát építsd a JDK Integer.java forrására 3 , hogy a 128-nál inkluzív objektum
                példányokat poolozza!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            <programlisting language="java"><![CDATA[Program T100
                {
                    package gagyi;
                    class Gagyi {
                        public static void main(String[]args){
                    
                            Integer x=-128;
                            Integer y=-128;
                    
                            System.out.println(x);
                            System.out.println(y);
                    
                            while (x <= y && x >= y && y != x);
                    
                        }
                    }
                
                }]]></programlisting>                 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>     

    <section>
        <title>Yoda</title>
        <para>
                Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
                conditions-t! 
                <link xlink:href="https://en.wikipedia.org/wiki/Yoda_conditions">https://en.wikipedia.org/wiki/Yoda_conditions</link>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>  

    <section>
        <title>Kódolás from scratch</title>
        <para>
                Induljunk ki ebből a tudományos közleményből: <link xlink:href="http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-
                alg.pdf">http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-
                        alg.pdf</link> és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
                Ha megakadsz, de csak végső esetben: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-
                javat/apbs02.html#pi_jegyei">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-
                javat/apbs02.html#pi_jegyei</link> (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
                melyet szeretném, ha átélnél)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        

    
        

</chapter>                
